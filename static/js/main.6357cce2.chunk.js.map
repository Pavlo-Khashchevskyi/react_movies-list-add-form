{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","utilities/validation.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","isFieldRequired","value","message","NewMovie","addMovie","useForm","defaultValues","control","handleSubmit","errors","formState","reset","onSubmit","data","noValidate","rules","required","name","render","field","TextField","id","label","variant","size","margin","fullWidth","error","Boolean","helperText","Button","type","sx","mt","App","state","moviesFromServer","obj","setState","prev","this","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6357cce2.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","export const isFieldRequired = {\n  value: true,\n  message: 'This field is required',\n};\n","import { Button, TextField } from '@mui/material';\nimport React from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { isFieldRequired } from '../../utilities/validation';\n\ntype AddMovie = (obj: Movie) => void;\n\ntype Props = {\n  addMovie: AddMovie,\n};\n\ninterface IFormData {\n  title: string;\n  description: string;\n  imgUrl: string;\n  imdbUrl: string;\n  imdbId: string;\n}\n\nexport const NewMovie: React.FC<Props> = ({ addMovie }) => {\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm<IFormData>({\n    defaultValues: {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    },\n  });\n\n  const onSubmit = handleSubmit((data: IFormData) => {\n    addMovie(data);\n    reset();\n  });\n\n  return (\n    <form onSubmit={onSubmit} noValidate>\n      <Controller\n        rules={{ required: isFieldRequired }}\n        control={control}\n        name=\"title\"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            id=\"outlined-basic\"\n            label=\"Title\"\n            variant=\"outlined\"\n            size=\"small\"\n            margin=\"normal\"\n            fullWidth\n            required\n            error={Boolean(errors.title)}\n            helperText={errors.title ? errors.title.message : ''}\n          />\n        )}\n      />\n\n      <Controller\n        rules={{ required: isFieldRequired }}\n        control={control}\n        name=\"description\"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            id=\"outlined-basic\"\n            label=\"Description\"\n            variant=\"outlined\"\n            size=\"small\"\n            margin=\"normal\"\n            fullWidth\n            required\n            error={Boolean(errors.description)}\n            helperText={errors.description ? errors.description.message : ''}\n          />\n        )}\n      />\n\n      <Controller\n        rules={{ required: isFieldRequired }}\n        control={control}\n        name=\"imgUrl\"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            id=\"outlined-basic\"\n            label=\"Image Url\"\n            variant=\"outlined\"\n            size=\"small\"\n            margin=\"normal\"\n            fullWidth\n            required\n            error={Boolean(errors.imgUrl)}\n            helperText={errors.imgUrl ? errors.imgUrl.message : ''}\n          />\n        )}\n      />\n\n      <Controller\n        rules={{ required: isFieldRequired }}\n        control={control}\n        name=\"imdbUrl\"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            id=\"outlined-basic\"\n            label=\"Imdb Url\"\n            variant=\"outlined\"\n            size=\"small\"\n            margin=\"normal\"\n            fullWidth\n            required\n            error={Boolean(errors.imdbUrl)}\n            helperText={errors.imdbUrl ? errors.imdbUrl.message : ''}\n          />\n        )}\n      />\n\n      <Controller\n        rules={{ required: isFieldRequired }}\n        control={control}\n        name=\"imdbId\"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            id=\"outlined-basic\"\n            label=\"Imdb Id\"\n            variant=\"outlined\"\n            size=\"small\"\n            margin=\"normal\"\n            fullWidth\n            required\n            error={Boolean(errors.imdbId)}\n            helperText={errors.imdbId ? errors.imdbId.message : ''}\n          />\n        )}\n      />\n      <Button\n        variant=\"contained\"\n        size=\"small\"\n        type=\"submit\"\n        fullWidth\n        sx={{ mt: 2 }}\n      >\n        Add movie\n      </Button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (obj: Movie) => {\n    if (obj) {\n      this.setState(prev => ({\n        movies: [...prev.movies, obj],\n      }));\n    }\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}